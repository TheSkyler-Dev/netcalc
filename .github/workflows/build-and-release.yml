name: Cross-Platform Build and Release

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  BUILD_TYPE: Release

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            artifact_name: netcalc.exe
            asset_name: netcalc-windows-x64.exe
            cmake_args: ""
          - os: ubuntu-latest
            artifact_name: netcalc
            asset_name: netcalc-linux-x64
            cmake_args: ""
          - os: macos-latest
            artifact_name: netcalc
            asset_name: netcalc-macos-x64
            cmake_args: ""

    steps:
    - uses: actions/checkout@v4

    - uses: actions/checkout@v4

    - name: Check compiler version
      run: clang++ --version

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake
        sudo apt-get update
        sudo apt-get install -y clang-16
        sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-16 100
        sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-16 100

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} ${{ matrix.cmake_args }}

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test binary (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        cd ${{github.workspace}}/build/bin
        ./${{ matrix.artifact_name }} --help

    - name: Test binary (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd ${{github.workspace}}/build/bin/Release
        ./${{ matrix.artifact_name }} --help

    - name: Prepare artifacts (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Create distribution directory
        mkdir -p netcalc-linux-x64
        
        # Copy binary and documentation
        cp ${{github.workspace}}/build/bin/${{ matrix.artifact_name }} netcalc-linux-x64/
        cp ${{github.workspace}}/LICENSE.txt netcalc-linux-x64/
        cp ${{github.workspace}}/AUTHORS.md netcalc-linux-x64/
        
        # Create user documentation without installation instructions
        cat > netcalc-linux-x64/USAGE.md << 'EOF'
        # Netcalc - Network Calculator
        
        A safe, fast command line utility to calculate IPv4/IPv6 network characteristics.
        
        ## Compatibility
        Compatible with any terminal that supports ANSI escape codes (bash, zsh, fish, etc.)
        
        ## Features
        - Calculate all network characteristics from any IP address
        - Identify network type, detect APIPA addresses
        
        ## Usage
        
        Basic syntax: `netcalc <IP_ADDRESS> --sn <CIDR_MASK> <FLAGS>`
        
        Example:
        ```bash
        netcalc 192.168.10.50 --sn /24 -A
        ```
        
        **Important:** Do not forget the `--sn` flag between IP address and CIDR mask!
        
        ## Flags
        
        - `-A`: Calculate all network characteristics
        - `-b`: Calculate broadcast address only
        - `-r`: Calculate network range (addressable hosts + broadcast and network)  
        - `-n`: Calculate network address
        - `-a`: Calculate addressable host range only
        - `-i`: Identify network type
        - `-s`: Calculate subnet mask
        - `-h`: Display help and usage
        
        ## Examples
        
        **Calculate all characteristics:**
        ```bash
        netcalc 192.168.10.50 --sn /24 -A
        ```
        Output:
        ```
        Calculating requested network characteristics for: 192.168.10.50
        IP: 192.168.10.50/24
        Address type: Private
        Subnet Mask: 255.255.255.0
        Network Address: 192.168.10.0
        Network Range: 192.168.10.0 - 192.168.10.255
        Addressable Host Range: 192.168.10.1 - 192.168.10.254
        Number of Addressable Hosts: 254
        Broadcast Address: 192.168.10.255
        ```
        
        **Network range only:**
        ```bash
        netcalc 10.0.0.0 --sn /8 -r
        ```
        
        **Identify network type:**
        ```bash
        netcalc 172.16.5.100 --sn /20 -i
        ```
        EOF
        
        # Create tar.gz archive
        tar -czf netcalc-${{ github.ref_name || 'dev' }}-linux-x64.tar.gz netcalc-linux-x64/
        
        # Calculate SHA256
        sha256sum netcalc-${{ github.ref_name || 'dev' }}-linux-x64.tar.gz > netcalc-${{ github.ref_name || 'dev' }}-linux-x64.tar.gz.sha256

    - name: Prepare artifacts (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        copy ${{github.workspace}}\build\bin\Release\${{ matrix.artifact_name }} ${{ matrix.asset_name }}

    - name: Prepare artifacts (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cp ${{github.workspace}}/build/bin/${{ matrix.artifact_name }} ${{ matrix.asset_name }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: |
          ${{ matrix.os == 'ubuntu-latest' && format('netcalc-{0}-linux-x64.tar.gz', github.ref_name || 'dev') || matrix.asset_name }}
          ${{ matrix.os == 'ubuntu-latest' && format('netcalc-{0}-linux-x64.tar.gz.sha256', github.ref_name || 'dev') || '' }}

  release:
    name: Attach to Draft Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Display structure of downloaded files
      run: ls -R artifacts/

    - name: Check for existing draft release
      id: check_release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Get the tag/version name
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          TAG_NAME="${{ github.ref_name }}"
        else
          TAG_NAME="dev-build"
        fi
        
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        
        # Check for existing draft release
        RELEASE_ID=$(gh api repos/${{ github.repository }}/releases --jq ".[] | select(.tag_name == \"$TAG_NAME\" and .draft == true) | .id" || echo "")
        
        if [ -n "$RELEASE_ID" ]; then
          echo "Found draft release with ID: $RELEASE_ID"
          echo "release_exists=true" >> $GITHUB_OUTPUT
          echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT
        else
          echo "No draft release found for tag: $TAG_NAME"
          echo "release_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Upload assets to existing draft release
      if: steps.check_release.outputs.release_exists == 'true'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG_NAME="${{ steps.check_release.outputs.tag_name }}"
        RELEASE_ID="${{ steps.check_release.outputs.release_id }}"
        
        # Upload Windows binary
        if [ -f "artifacts/netcalc-windows-x64.exe/netcalc-windows-x64.exe" ]; then
          gh api repos/${{ github.repository }}/releases/$RELEASE_ID/assets \
            --method POST \
            --field name="netcalc-$TAG_NAME-windows-x64.exe" \
            --field label="Windows x64 Binary" \
            --input "artifacts/netcalc-windows-x64.exe/netcalc-windows-x64.exe" \
            --field content_type="application/octet-stream"
        fi
        
        # Upload macOS binary
        if [ -f "artifacts/netcalc-macos-x64/netcalc-macos-x64" ]; then
          gh api repos/${{ github.repository }}/releases/$RELEASE_ID/assets \
            --method POST \
            --field name="netcalc-$TAG_NAME-macos-x64" \
            --field label="macOS x64 Binary" \
            --input "artifacts/netcalc-macos-x64/netcalc-macos-x64" \
            --field content_type="application/octet-stream"
        fi
        
        # Upload Linux tar.gz archive
        LINUX_ARCHIVE=$(find artifacts/netcalc-linux-x64/ -name "netcalc-*-linux-x64.tar.gz" | head -1)
        if [ -f "$LINUX_ARCHIVE" ]; then
          ARCHIVE_NAME=$(basename "$LINUX_ARCHIVE")
          gh api repos/${{ github.repository }}/releases/$RELEASE_ID/assets \
            --method POST \
            --field name="$ARCHIVE_NAME" \
            --field label="Linux x64 Archive" \
            --input "$LINUX_ARCHIVE" \
            --field content_type="application/gzip"
        fi
        
        # Upload Linux SHA256 checksum
        LINUX_SHA=$(find artifacts/netcalc-linux-x64/ -name "netcalc-*-linux-x64.tar.gz.sha256" | head -1)
        if [ -f "$LINUX_SHA" ]; then
          SHA_NAME=$(basename "$LINUX_SHA")
          gh api repos/${{ github.repository }}/releases/$RELEASE_ID/assets \
            --method POST \
            --field name="$SHA_NAME" \
            --field label="Linux x64 Archive SHA256" \
            --input "$LINUX_SHA" \
            --field content_type="text/plain"
        fi

    - name: Summary
      if: steps.check_release.outputs.release_exists == 'true'
      run: |
        echo "‚úÖ Build completed successfully!"
        echo "üì¶ Artifacts uploaded to draft release: ${{ steps.check_release.outputs.tag_name }}"
        echo "üîç Check the releases page to review and publish the release."
      
    - name: No draft release found
      if: steps.check_release.outputs.release_exists == 'false'
      run: |
        echo "‚ÑπÔ∏è No draft release found for tag/branch: ${{ steps.check_release.outputs.tag_name }}"
        echo "üí° Create a draft release first, then re-run this workflow to attach the built artifacts."
        echo "üèóÔ∏è Artifacts are still available in the workflow run for manual download."
